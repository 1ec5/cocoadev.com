I'm trying to connect to a web service using cocoa. I've used the [[WSMakeStub]] tool in the developer tools to generate the stubs, but the simple Hello World method which has no parameters does not accept a simple call. I'm just trying to call it using the line..
([[NSString]]'')[Service1Service Helloworld] ; 

I've also tried using nil as a parameter like this...

<code>temp = ([[NSString]]'')[Service1Service Helloworld:nil] ;</code>

This resulted in the following error...

''''' -[[[NSPlaceholderDictionary]] initWithObjects:forKeys:count:]: attempt to insert nil value

I passed a string like this...
temp = ([[NSString]]'')[Service1Service [[HelloWorld]]:@"test"] ;

When I try the string I get the following error...

Invalid parameter not satisfying: aString != nil

I even tried a dummy dictionary. with a key of "test" and value of "mytest" That still generated the same message as the string attempt.

Any assistance is appreciated. I've included the wsdl and the implementation stub file for reference, below.

Paul

Here's the wsdl file generated by my sample .Net web service.

<code>
<?xml version="1.0" encoding="utf-8"?>
<definitions xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:s="http://www.w3.org/2001/[[XMLSchema]]" xmlns:s0="http://tempuri.org/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" targetNamespace="http://tempuri.org/" xmlns="http://schemas.xmlsoap.org/wsdl/">
<types>
<s:schema elementFormDefault="qualified" targetNamespace="http://tempuri.org/">
<s:element name="[[HelloWorld]]">
<s:complexType />
</s:element>
<s:element name="[[HelloWorldResponse]]">
<s:complexType>
<s:sequence>
<s:element minOccurs="0" maxOccurs="1" name="[[HelloWorldResult]]" type="s:string" />
</s:sequence>
</s:complexType>
</s:element>
</s:schema>
</types>
<message name="[[HelloWorldSoapIn]]">
<part name="parameters" element="s0:[[HelloWorld]]" />
</message>
<message name="[[HelloWorldSoapOut]]">
<part name="parameters" element="s0:[[HelloWorldResponse]]" />
</message>
<portType name="Service1Soap">
<operation name="[[HelloWorld]]">
<input message="s0:[[HelloWorldSoapIn]]" />
<output message="s0:[[HelloWorldSoapOut]]" />
</operation>
</portType>
<binding name="Service1Soap" type="s0:Service1Soap">
<soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document" />
<operation name="[[HelloWorld]]">
<soap:operation soapAction="http://tempuri.org/[[HelloWorld]]" style="document" />
<input>
<soap:body use="literal" />
</input>
<output>
<soap:body use="literal" />
</output>
</operation>
</binding>
<service name="Service1">
<port name="Service1Soap" binding="s0:Service1Soap">
<soap:address location="http://localhost/[[MacTest]]/Service1.asmx" />
</port>
</service>
</definitions>
</code>
Here's the stub that the [[WSMakeStubs]] Developer tool created...
<code>
/''-
'' Method Name: [[HelloWorld]]
'' Documentation: <no documentation>
''/
@implementation [[HelloWorld]]
- (void) setParameters:([[CFTypeRef]] /'' Complex type http://tempuri.org/|[[HelloWorld]] ''/) in_parameters
{
id _paramValues[] = { 
in_parameters, 
}; 
[[NSString]]'' _paramNames[] = { 
@"parameters", 
}; 
[super setParameters:1 values: _paramValues names: _paramNames]; 
}

- (id) resultValue
{
return [[super getResultDictionary] objectForKey: @"parameters"]; 
}

- ([[WSMethodInvocationRef]]) genCreateInvocationRef
{
return [self createInvocationRef 
/''endpoint''/: @"http://206.195.68.20/[[MacTest]]/Service1.asmx" 
methodName: @"[[HelloWorld]]" 
protocol: ([[NSString]]'') kWSSOAP2001Protocol 
style: ([[NSString]]'') kWSSOAPStyleRPC 
soapAction: @"http://tempuri.org/[[HelloWorld]]" 
methodNamespace: NULL /'' No Method Namespace specified ''/ 
]; 
}

@end; /'' [[HelloWorld]] ''/

@implementation Service1Service

+ (id) [[HelloWorld]]:([[CFTypeRef]] /'' Complex type http://tempuri.org/|[[HelloWorld]] ''/) in_parameters
{
id result = NULL; 
[[HelloWorld]]'' _invocation = [[[[HelloWorld]] alloc] init]; 
[_invocation setParameters: in_parameters]; 
result = [[_invocation resultValue] retain]; 
[_invocation release]; 
return result; 
}

@end;

/''-
'' End of WSDL document at http://206.195.68.20/[[MacTest]]/Service1.asmx?wsdl
''/ 
</code>


Paul,

Here is how I was able to invoke a .NET [[WebService]]:

[[NSDictionary]] ''params = [[[[NSDictionary]] alloc] init];
[[HelloWorld]]'' _invocation = [[[[HelloWorld]] alloc] init];    
[_invocation setParameters: params];    

[[NSDictionary]] ''result = [[_invocation getResultDictionary] retain];    
if ([[WSMethodResultIsFault]] (([[CFDictionaryRef]]) result)) /''error?''/
	[information setStringValue: [result objectForKey: ([[NSString]] '')kWSFaultString]];
else /''no error; all's well''/
	[information setStringValue: [result objectForKey: ([[NSString]] '')kWSMethodInvocationResult]];		
[_invocation release];    

Sean